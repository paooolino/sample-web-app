#
# CMS app config
#

# 
# Routes section
#
# Bind each route to one component.
# Routes may be nested.
# 
# component_name: the name of the layout component.
# path: the url path. Do not define if IndexRoute is used.
# children: (optional) a list of nested layout components.
# IndexRoute: (optional) if set to true identifies the home route.
#   When specified, path mustn't be defined.
# onEnter: (optional) the name of the helper function to execute when entering the route.
#   the inputs are [nextState, replace]
#   you may use store.getState() to get the current state
#   you may use replace("/new-route") to redirect
#
routes:
- component_name: Layout
  path: /
  children:
  - component_name: HomePage
    IndexRoute: true
    
  ## login/register ##
  - component_name: LoginPage
    path: /login
  - component_name: RegisterPage
    path: /register
  - component_name: LostPasswordPage
    path: /lost-password
  - component_name: DashboardPage
    path: /dashboard
    onEnter: checkLogin
    
  ## public pages ##
  - component_name: PublicTeamsPage
    path: /teams
  - component_name: PublicTeamPage
    path: /team/:id
  - component_name: PublicPlayerPage
    path: /player/:id
  - component_name: SeasonPage
    path: /current-season
  - component_name: LeaguePage
    path: /league/:id
    
  ## management pages ##
  - component_name: TeamPage
    path: /dashboard/team
    onEnter: checkLogin
  - component_name: PlayerPage
    path: /dashboard/player/:id
    onEnter: checkLogin
  - component_name: TrainingPage
    path: /dashboard/training
    onEnter: checkLogin
  - component_name: LineupPage
    path: /dashboard/lineup
    onEnter: checkLogin
  - component_name: LiveMatchPage
    path: /dashboard/livematch
    onEnter: checkLogin
  - component_name: StadiumPage
    path: /dashboard/stadium
    onEnter: checkLogin
  - component_name: FinancePage
    path: /dashboard/finance
    onEnter: checkLogin
  - component_name: EventsPage
    path: /dashboard/events
    onEnter: checkLogin
  - component_name: FixturesPage
    path: /dashboard/fixtures
    onEnter: checkLogin
  - component_name: StandingsPage
    path: /dashboard/standings
    onEnter: checkLogin

# define helper functions for router.
#
# name: the function name.
# inputs: the input parameters.
# body: the body of the function.
#   is possible to access the store through store.getState()
#   and then .appending redux modules name defined below (i.e. store.getState().login.isLoggedIn)
#
routes_helperfunctions:
- name: checkLogin
  inputs: [nextState, replace]
  body: |
    // do nothing
    
#
# Forms section
#
# These are special components decorated using the redux-form library.
#
# name: the name of the form component.
# html: the html/jsx code to render the component.
#   You may use <Field> component.
#   You may use <Field component={renderField}, this is for the validation error message.
#   props.submitting is automatically defined.
#   props.handleSubmit should be defined in the container component.
#     it automatically takes form data as parameter.
# validators: a list of validation details
#   - field: the field name, corresponding to a field name defined in the html.
#   - error_message: the error message.
#   - contraints: a list of constraints. Possible values:
#     required
#     ...
#
forms: []
    
# 
# Components section
#
# These are the application components.
# 
# name: the name of the component.
# html: the html/jsx code to render the component.
#   use {props.children} to render children.
# redux_actions: a list of redux modules from which import actions.
#   IMPORTANT: if not set, turn the component into STATELESS.
#   if no action is needed, just define it as an empty array []
# helper_components: a list of other components used by this component.
# props: a list of properties used by this component.
#   name: the prop name.
#   subreducer: the redux component name to which the prop belongs. 
#     NOT NEEDED FOR STATELESS.
#     NOT NEEDED FOR type = func
#   type: the prop type (func|string)
#   def: if type is "func", is mandatory to define here the function.
#        action creators should be referenced as "actions_<subreducer>."
#        example:
#         (evt) => {
#           dispatch(actions_login.logout());
#           dispatch(push('/login'));
#         }
#     NOT NEEDED FOR STATELESS.
# willmount: (optional) text block
# receiveprops: (optional) text block
#
# You may use <Link to="/">Home</Link> as Link is available by default.
#
# Stateless component
#
# - name: <component name>
#   helper_components: ['<helper component1>', '<helper component2>']
#   html: |
#     <div>{props.children}</div>
#   props:
#   - name: <prop name (also functions)>
#     type: <prop type>
#
# Connected component
#
# - name: <component name>
#   redux_actions: ['<redux module 1>', '<redux module 2>'] or just an empty array []
#   helper_components: ['<helper component1>', '<helper component2>']
#   html: |
#     <div>{this.props.children}</div>
#   props:
#   - name: <prop name (not function)>
#     type: <prop type>
#     subreducer: <redux module>
#   - name: <prop name (function)>
#     type: func
#     def: |
#       (evt) => {
#         dispatch(actions_login.logout());
#         dispatch(push('/login'));
#       }
#
components:

- name: Layout
  helper_components: []
  html: |
    <div>
      <header>
        <div>
          <div>
            <b>Login/Register</b> -
            <Link to="/">HomePage</Link> |
            <Link to="/login">LoginPage</Link> |
            <Link to="/register">RegisterPage</Link> |
            <Link to="/lost-password">LostPasswordPage</Link> |
            <Link to="/dashboard">DashboardPage</Link>
          </div>
          <div>
            <b>Public</b> -
            <Link to="/current-season">SeasonPage</Link> |
            <Link to="/league/1">LeaguePage</Link> |
            <Link to="/teams">PublicTeamsPage</Link> |
            <Link to="/team/1">PublicTeamPage</Link> |
            <Link to="/player/1">PublicPlayerPage</Link> |
          </div>
          <div>
            <b>Management</b> -
            <Link to="/dashboard/team">TeamPage</Link> |
            <Link to="/dashboard/player/0">PlayerPage</Link> |
            <Link to="/dashboard/training">TrainingPage</Link> |
            <Link to="/dashboard/lineup">LineupPage</Link> |
            <Link to="/dashboard/livematch">LiveMatchPage</Link> |
            <Link to="/dashboard/stadium">StadiumPage</Link> |
            <Link to="/dashboard/finance">FinancePage</Link> |
            <Link to="/dashboard/events">EventsPage</Link> |
            <Link to="/dashboard/fixtures">FixturesPage</Link> |
            <Link to="/dashboard/standings">StandingsPage</Link>
          </div>
        </div>
      </header>
      <div className="content">
        {props.children}
      </div>
      <footer>
        <div>
          Copyright (c) 2016
        </div>
      </footer>
    </div>
  props: []
    
- name: HomePage
  helper_components: []
  html: |
    <div>
      <h1>HomePage</h1>
    </div>
  props: []
    
- name: LoginPage
  helper_components: []
  html: |
    <div>
      <h1>LoginPage</h1>
    </div>
  props: []
    
- name: RegisterPage
  helper_components: []
  html: |
    <div>
      <h1>RegisterPage</h1>
    </div>
  props: []
  
- name: LostPasswordPage
  helper_components: []
  html: |
    <div>
      <h1>LostPasswordPage</h1>
    </div>
  props: []
  
- name: DashboardPage
  helper_components: []
  html: |
    <div>
      <h1>DashboardPage</h1>
    </div>
  props: []
  
- name: PublicTeamsPage
  helper_components: []
  html: |
    <div>
      <h1>PublicTeamsPage</h1>
    </div>
  props: []
  
- name: PublicTeamPage
  helper_components: []
  html: |
    <div>
      <h1>PublicTeamPage</h1>
    </div>
  props: []
  
- name: PublicPlayerPage
  helper_components: []
  html: |
    <div>
      <h1>PublicPlayerPage</h1>
    </div>
  props: []
  
- name: SeasonPage
  redux_actions: [season]
  helper_components: []
  html: |
    <div>
      <h1>SeasonPage</h1>
      <div>
        <p>Display infos about the current season.</p>
        <div><b>Current season:</b> {this.props.currentSeason}</div>
        <div><b>Leagues:</b>
          <ul>
            {this.props.leagues.map(league => 
              <li key={league.id}><Link to={"/league/" + league.id}>{league.name}</Link></li>
            )}
          </ul>
        </div>
      </div>
    </div>
  willmount: |
    this.props.fetch_season();
  props:
  - name: currentSeason
    subreducer: season
    type: number
  - name: leagues
    subreducer: season
    type: array
  - name: fetch_season
    type: func
    def: |
      () => {
        dispatch(actions_season.fetch_season());
      }
  
- name: LeaguePage
  helper_components: []
  html: |
    <div>
      <h1>LeaguePage</h1>
    </div>
  props: []
  
- name: TeamPage
  helper_components: []
  html: |
    <div>
      <h1>TeamPage</h1>
    </div>
  props: []
  
- name: PlayerPage
  helper_components: []
  html: |
    <div>
      <h1>PlayerPage</h1>
    </div>
  props: []
  
- name: TrainingPage
  helper_components: []
  html: |
    <div>
      <h1>TrainingPage</h1>
    </div>
  props: []
  
- name: LineupPage
  helper_components: []
  html: |
    <div>
      <h1>LineupPage</h1>
    </div>
  props: []
  
- name: LiveMatchPage
  helper_components: []
  html: |
    <div>
      <h1>LiveMatchPage</h1>
    </div>
  props: []
  
- name: StadiumPage
  helper_components: []
  html: |
    <div>
      <h1>StadiumPage</h1>
    </div>
  props: []
  
- name: FinancePage
  helper_components: []
  html: |
    <div>
      <h1>FinancePage</h1>
    </div>
  props: []
  
- name: EventsPage
  helper_components: []
  html: |
    <div>
      <h1>EventsPage</h1>
    </div>
  props: []
  
- name: FixturesPage
  helper_components: []
  html: |
    <div>
      <h1>FixturesPage</h1>
    </div>
  props: []
  
- name: StandingsPage
  helper_components: []
  html: |
    <div>
      <h1>StandingsPage</h1>
    </div>
  props: []
  
# 
# Redux Modules section
#
# define actions and reducers.
# 
# name: the name of the module.
# initialState: a block of text defining a javascript plain object 
#   (without curly braces). 
#   ex: 
#     initialState: |
#       currentSeason: 0,
#       isFetching: false
# actions: a list of sync actions used by the module.
#   name: the name of the sync action (uppercase).
#   inputs: a list of properties to pass as inputs to the action creator.
#           example: [name, value]
#           these names will be referenced in effects as "action.<name>".
#   effects: a list of key>newValue properties to set when the action is dispatched.
#            references to input names must be prefixed with "action.".
#            a key may be dynamic. Surround it with double quotes and brackets
#            example: "[action.name]"
# async_actions: a list of async actions defined by the module.
#   name: the name of the async action (lowercase).
#   inputs: a list of properties to pass as inputs to the action creator.
#         the same variables will be passed to the server.
#   request_action: a sync action (name, inputs, effects) to dispatch when requesting.
#   failure_action: a sync action (name, inputs, effects) to dispatch when failure.
#   success_action: a sync action (name, inputs, effects) to dispatch when success.
#     example:
#
#    success_action: 
#      name: FETCH_SUCCESS
#      inputs: [json]
#      effects:
#      - key: currentSeason
#        newValue: action.json.currentSeason
#
#   onSuccess: additional code to be triggered on success.
#     example:
#     onSuccess: |
#       dispatch(push('/dashboard'));
#
redux_modules:
- name: season
  initialState: |
    currentSeason: 0,
    leagues: []
  actions: []
  async_actions:
  - name: fetch_season
    inputs: []
    request_action:
      name: FETCH_REQUEST
      inputs: []
      effects: []
    failure_action:
      name: FETCH_FAILURE
      inputs: []
      effects: []
    success_action: 
      name: FETCH_SUCCESS
      inputs: [json]
      effects:
      - key: currentSeason
        newValue: action.json.currentSeason
      - key: leagues
        newValue: action.json.leagues
    onSuccess: