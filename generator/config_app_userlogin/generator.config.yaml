# 
# Routes section
#
# Bind each route to one component.
# Routes may be nested.
# 
# component_name: the name of the layout component.
# path: the url path.
# children: (optional) a list of nested layout components.
# IndexRoute: (optional) if set to true identifies the home route.
#
routes:
- path: /
  component_name: MainLayout
  children:
  - component_name: HomePage
    IndexRoute: true
  - path: /login
    component_name: LoginPage
  - path: /dashboard
    component_name: DashboardPage
    onEnter: authCheck

routes_helperfunctions:
- name: authCheck
  inputs: [nextState, replace]
  body: |
    if(!store.getState().login.isLoggedIn) {
      replace("/login");
    }

#
# Forms section
#
# These are special components decorated using the redux-form library.
#
# name: the name of the form component.
# html: the html/jsx code to render the component.
#
forms:
- name: LoginForm
  html: |
    <form onSubmit={props.handleSubmit}>
      <div className="formRow">
        <div className="formLabel">
          Username
        </div>
        <div className="formField">
          <Field name="usr" component="input" type="text" />
        </div>
      </div>
      <div className="formRow">
        <div className="formLabel">
          Password
        </div>
        <div className="formField">
          <Field name="pwd" component="input" type="password" />
        </div>
      </div>
      <div className="formRow">
        <button disabled={props.pristine || props.submitting}>Login</button>
      </div>
    </form>
    
# 
# Components section
#
# These are the application components.
# 
# name: the name of the component.
# html: the html/jsx code to render the component.
# redux_actions: a list of redux modules from which import actions.
#   IMPORTANT: if not set, turn the component into STATELESS.
# helper_components: a list of other components used by this component.
# props: a list of properties used by this component.
#   name: the prop name.
#   subreducer: the redux component name to which the prop belongs. 
#     NOT NEEDED FOR STATELESS.
#   type: the prop type (func|string)
#   def: if type is "func", is mandatory to define here the function.
#        action creators should be referenced as "actions_<subreducer>."
#     NOT NEEDED FOR STATELESS.
#
components:
#
# MainLayout stateless component
# -----------------------------------------------------------------------------
- name: MainLayout
  html: |
    <div className="MainLayout style-normal">
      <Nav />
      {props.children}
    </div>
  helper_components: [Nav]
  props: []
  
#
# Nav stateless component
# -----------------------------------------------------------------------------  
- name: Nav
  html: |
    <div className="Nav">
      <Link to="/">Home</Link>
      <Link to="/login">Login</Link>
      <Link to="/dashboard">Dashboard</Link>
    </div>
  helper_components: []
  props: []

#
# HomePage stateless component
# -----------------------------------------------------------------------------    
- name: HomePage
  html: |
    <div className="HomePage">
      HomePage
    </div>
  helper_components: []
  props: []

#
# Popup stateless component
# -----------------------------------------------------------------------------    
- name: Popup
  html: |
    <div className="Popup">
      <div className="Popup_inner">
        <div className="Popup_message">{props.message}</div>
          <button onClick={props.close_handler}>OK</button>
      </div>
    </div>
  helper_components: []
  props:
  - name: message
    type: string
  - name: close_handler
    type: func

#
# DashboardPage stateless component
# -----------------------------------------------------------------------------    
- name: DashboardPage
  html: |
    <div className="DashboardPage">
      DashboardPage
    </div>
  helper_components: []
  props: []
  
#
# LoginPage component
# -----------------------------------------------------------------------------        
- name: LoginPage
  html: |
    <div className="LoginPage">
      {props.isLoggedIn ? 
        <button onClick={props.handleLogout}>Logout</button>
        :
        <LoginForm onSubmit={props.handleSubmit} />
      }
      {props.errorMessage!='' && <Popup close_handler={props.clean_error_message_handler} message={props.errorMessage} />}
    </div>
  redux_actions: [login]
  helper_components: [Popup, LoginForm]
  props:
  - name: isSubmitting
    type: bool
    subreducer: login
    
  - name: errorMessage
    type: string
    subreducer: login
          
  - name: isLoggedIn
    type: bool
    subreducer: login
    
  - name: handleSubmit
    type: func
    def: |
      (data) => {
        dispatch(actions_login.submit(data.usr, data.pwd));
      }
      
  - name: clean_error_message_handler
    type: func
    def: |
      (evt) => {
        dispatch(actions_login.clean_error_message());
      }
  
  - name: handleLogout
    type: func
    def: |
      (evt) => {
        dispatch(actions_login.logout());
      }
  
# 
# Redux Modules section
#
# define actions and reducers.
# 
# name: the name of the module.
# initialState: a list of elements defining the initial shape of the state.
#   name: the name of the property.
#   jsvalue: the value of the property.
# actions: a list of sync actions used by the module.
#   name: the name of the sync action (uppercase).
#   inputs: a list of properties to pass as inputs to the action creator.
#           example: [name, value]
#           these names will be referenced in effects as "action.<name>".
#   effects: a list of key>newValue properties to set when the action is dispatched.
#            references to input names must be prefixed with "action.".
#            a key may be dynamic. Surround it with double quotes and brackets
#            example: "[action.name]"
# async_actions: a list of async actions defined by the module.
#   name: the name of the async action (lowercase).
#   inputs: a list of properties to pass as inputs to the action creator.
#         the same variables will be passed to the server.
#   request_action: the name of the action to dispatch when requesting.
#
redux_modules:    
- name: login

  initialState:
  - name: isSubmitting
    jsvalue: "false"
  - name: errorMessage
    jsvalue: "''"
  - name: loginResult
    jsvalue: "''"
  - name: isLoggedIn
    jsvalue: "false"
    
  actions:      
  - name: SUBMIT_REQUEST
    inputs: []
    effects:
    - key: isSubmitting
      newValue: "true"
      
  - name: SUBMIT_FAILURE
    inputs: [err]
    effects:
    - key: errorMessage
      newValue: action.err
    - key: isSubmitting
      newValue: "false"
      
  - name: SUBMIT_SUCCESS
    inputs: [json]
    effects:
    - key: loginResult
      newValue: action.json
    - key: isSubmitting
      newValue: "false"
    - key: errorMessage
      newValue: "''"
    - key: isLoggedIn
      newValue: "true"
      
  - name: CLEAN_ERROR_MESSAGE
    inputs: []
    effects:
    - key: errorMessage
      newValue: "''"
      
  - name: LOGOUT
    inputs: []
    effects:
    - key: isLoggedIn
      newValue: "false"
      
  async_actions:
  - name: submit
    inputs: [usr, pwd]
    request_action_name: SUBMIT_REQUEST
    failure_action_name: SUBMIT_FAILURE
    success_action_name: SUBMIT_SUCCESS
    onSuccess: |
      dispatch(push('/dashboard'));

    
